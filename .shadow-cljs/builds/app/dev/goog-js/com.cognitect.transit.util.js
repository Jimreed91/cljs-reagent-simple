["^ ","~:resource-id",["~:shadow.build.classpath/resource","com/cognitect/transit/util.js"],"~:js","goog.provide(\"com.cognitect.transit.util\");\ngoog.require(\"goog.object\");\ngoog.scope(function() {\n  var util = com.cognitect.transit.util, gobject = goog.object;\n  if (typeof Object.keys != \"undefined\") {\n    util.objectKeys = function(obj) {\n      return Object.keys(obj);\n    };\n  } else {\n    util.objectKeys = function(obj) {\n      return gobject.getKeys(obj);\n    };\n  }\n  if (typeof Array.isArray != \"undefined\") {\n    util.isArray = function(obj) {\n      return Array.isArray(obj);\n    };\n  } else {\n    util.isArray = function(obj) {\n      return goog.typeOf(obj) === \"array\";\n    };\n  }\n  util.chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\x3d\";\n  util.randInt = function(ub) {\n    return Math.round(Math.random() * ub);\n  };\n  util.randHex = function() {\n    return util.randInt(15).toString(16);\n  };\n  util.randomUUID = function() {\n    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + \"-\" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + \"-\" + \"4\" + util.randHex() + util.randHex() + util.randHex() + \"-\" + rhex + util.randHex() + util.randHex() + util.randHex() + \"-\" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + \n    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();\n    return ret;\n  };\n  util.btoa = function(input) {\n    if (typeof btoa != \"undefined\") {\n      return btoa(input);\n    } else {\n      var str = String(input);\n      for (var block, charCode, idx = 0, map = util.chars, output = \"\"; str.charAt(idx | 0) || (map = \"\\x3d\", idx % 1); output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {\n        charCode = str.charCodeAt(idx += 3 / 4);\n        if (charCode > 255) {\n          throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n        }\n        block = block << 8 | charCode;\n      }\n      return output;\n    }\n  };\n  util.atob = function(input) {\n    if (typeof atob != \"undefined\") {\n      return atob(input);\n    } else {\n      var str = String(input).replace(/=+$/, \"\");\n      if (str.length % 4 == 1) {\n        throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n      }\n      for (var bc = 0, bs, buffer, idx = 0, output = \"\"; buffer = str.charAt(idx++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n        buffer = util.chars.indexOf(buffer);\n      }\n      return output;\n    }\n  };\n  util.Uint8ToBase64 = function(u8Arr) {\n    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = \"\", slice = null;\n    while (index < length) {\n      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));\n      result += String.fromCharCode.apply(null, slice);\n      index += CHUNK_SIZE;\n    }\n    return util.btoa(result);\n  };\n  util.Base64ToUint8 = function(base64) {\n    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);\n    for (var i = 0; i < len; i++) {\n      var ascii = binary_string.charCodeAt(i);\n      bytes[i] = ascii;\n    }\n    return bytes;\n  };\n});\n","~:source","// Copyright 2014 Cognitect. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\"com.cognitect.transit.util\");\ngoog.require(\"goog.object\");\n\ngoog.scope(function () {\n\n    var util    = com.cognitect.transit.util,\n        gobject = goog.object;\n\n    if (typeof Object.keys != \"undefined\") {\n        util.objectKeys = function (obj) {\n            return Object.keys(obj);\n        };\n    } else {\n        util.objectKeys = function (obj) {\n            return gobject.getKeys(obj);\n        };\n    }\n\n    if (typeof Array.isArray != \"undefined\") {\n        util.isArray = function (obj) {\n            return Array.isArray(obj);\n        };\n    } else {\n        util.isArray = function (obj) {\n            return goog.typeOf(obj) === \"array\";\n        };\n    }\n\n    /**\n     * @const\n     * @type {string}\n     */\n    util.chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    util.randInt = function (ub) {\n        return Math.round(Math.random() * ub);\n    };\n\n    util.randHex = function () {\n        return util.randInt(15).toString(16);\n    };\n\n    util.randomUUID = function () {\n        var rhex = (0x8 | (0x3 & util.randInt(14))).toString(16),\n            ret  = util.randHex() + util.randHex() + util.randHex() + util.randHex() +\n                   util.randHex() + util.randHex() + util.randHex() + util.randHex() + \"-\" +\n                   util.randHex() + util.randHex() + util.randHex() + util.randHex() + \"-\" +\n                              \"4\" + util.randHex() + util.randHex() + util.randHex() + \"-\" +\n                             rhex + util.randHex() + util.randHex() + util.randHex() + \"-\" +\n                   util.randHex() + util.randHex() + util.randHex() + util.randHex() +\n                   util.randHex() + util.randHex() + util.randHex() + util.randHex() +\n                   util.randHex() + util.randHex() + util.randHex() + util.randHex();\n        return ret;\n    };\n\n// https://github.com/davidchambers/Base64.js\n\n    util.btoa = function (input) {\n        if (typeof btoa != \"undefined\") {\n            return btoa(input);\n        } else {\n            var str = String(input);\n            for (\n                var block, charCode, idx = 0, map = util.chars, output = '';\n                str.charAt(idx | 0) || (map = '=', idx % 1);\n                output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n            ) {\n                charCode = str.charCodeAt(idx += 3 / 4);\n                if (charCode > 0xFF) {\n                    throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n                }\n                block = block << 8 | charCode;\n            }\n            return output;\n        }\n    };\n\n    /**\n     * @suppress {uselessCode}\n     */\n    util.atob = function (input) {\n        if (typeof atob != \"undefined\") {\n            return atob(input);\n        } else {\n            var str = String(input).replace(/=+$/, '');\n            if (str.length % 4 == 1) {\n                throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n            }\n            for (\n                var bc = 0, bs, buffer, idx = 0, output = '';\n                buffer = str.charAt(idx++);\n                ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n                bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n            ) {\n                buffer = util.chars.indexOf(buffer);\n            }\n            return output;\n        }\n    };\n\n    util.Uint8ToBase64 = function (u8Arr) {\n        var CHUNK_SIZE = 0x8000,\n            index      = 0,\n            length     = u8Arr.length,\n            result     = '',\n            slice      = null;\n\n        while (index < length) {\n            slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));\n            result += String.fromCharCode.apply(null, slice);\n            index += CHUNK_SIZE;\n        }\n\n        return util.btoa(result);\n    };\n\n    util.Base64ToUint8 = function (base64) {\n        var binary_string = util.atob(base64),\n            len           = binary_string.length,\n            bytes         = new Uint8Array(len);\n\n        for (var i = 0; i < len; i++) {\n            var ascii = binary_string.charCodeAt(i);\n            bytes[i] = ascii;\n        }\n\n        return bytes;\n    };\n\n});\n","~:compiled-at",1668862146730,"~:source-map-json","{\n\"version\":3,\n\"file\":\"com.cognitect.transit.util.js\",\n\"lineCount\":1,\n\"mappings\":\";\",\n\"sources\":[],\n\"names\":[]\n}\n"]